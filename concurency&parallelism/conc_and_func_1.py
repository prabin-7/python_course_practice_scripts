import concurrent.futures 
import time
import random


"""3 types of examples in single script 
1. sequential approach using simple code 
2. using executor.map()
3. using exeuctor.submit() + as_complete()"""

"""errors encountered :
1. """

Names = ['Ram','Shyam','Hari','Krishna','Ganesh','Yang','Yun']

def send_mail(name:str) -> str:
    duration = random.randint(1,5)
    print(f'Sending email to: {name} duration: {duration}s')
    time.sleep(duration)
    # return f"Mail sent to {name}"   see this line didn't give error becuase i had name variable in the global scope
    return f"Mail sent to {name}"
    

# example 1 : sequential 
# if __name__ == "__main__":
#     start = time.perf_counter()
#     results = []
#     for naam in Names: 
#         results.append(send_mail(naam))
    
    
#     print("\n Emails sent !")
#     for result in results:
#         print(result)
#     print(f"The task completed in{time.perf_counter() - start}")
    

# if __name__ == "__main__":
#     start = time.perf_counter()
#     resuts = []
#     with concurrent.futures.ThreadPoolExecutor() as executor:
#         results = list(executor.map(send_mail,Names))
    
#     print("Emails sent !!")
#     for result in results:
#         print(result)
    
#     print(f"Time taken : {time.perf_counter() - start}s")
# """ example 2 works for 5 seconds if the highest duration generated by the random.randint(1,5) is 5"""

##example 3: using executor.submit() + as_completed()
if __name__ == "__main__":
    start = time.perf_counter()
    results = []
    with concurrent.futures.ThreadPoolExecutor() as executor:
        futures = {executor.submit(send_mail,name) : name for name in Names}

        print("\n Emails sent:")
        for future in concurrent.futures.as_completed(futures):
            name = futures[future]
            
            try: 
                result = future.result()
            except Exception as e:
                print(f"An error occured: {e}")
            print(result)
        print(f"Time taken : {time.perf_counter() - start}s")

"""You get a Future object. This is a built-in class in Python's
concurrent.futures module. Each Future represents the result of 
an asynchronous computation.

 So this is how it fits in this code:
send_mail(name) is submitted to a thread.

executor.submit(...) gives you a Future object.

future.result() gets the actual 
"Mail sent to Ram" result from that thread."""